(window.webpackJsonp=window.webpackJsonp||[]).push([[1,13,18,22,23,29],{11:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "PCanvas", function() { return /* binding */ PCanvas; });\n__webpack_require__.d(__webpack_exports__, "PCanvasController", function() { return /* reexport */ pcnvas_controller["PCanvasController"]; });\n__webpack_require__.d(__webpack_exports__, "usePCanvas", function() { return /* binding */ usePCanvas; });\n__webpack_require__.d(__webpack_exports__, "CanvasEventData", function() { return /* reexport */ pcnvas_controller["CanvasEventData"]; });\n__webpack_require__.d(__webpack_exports__, "CanvasEvent", function() { return /* reexport */ pcnvas_controller["CanvasEvent"]; });\n\n// EXTERNAL MODULE: external "React"\nvar external_React_ = __webpack_require__(0);\nvar external_React_default = /*#__PURE__*/__webpack_require__.n(external_React_);\n\n// EXTERNAL MODULE: ./src/pages/paint/pcanvas/style.less\nvar style = __webpack_require__(45);\nvar style_default = /*#__PURE__*/__webpack_require__.n(style);\n\n// EXTERNAL MODULE: ./node_modules/lodash/throttle.js\nvar throttle = __webpack_require__(84);\nvar throttle_default = /*#__PURE__*/__webpack_require__.n(throttle);\n\n// EXTERNAL MODULE: external "Hammer"\nvar external_Hammer_ = __webpack_require__(46);\nvar external_Hammer_default = /*#__PURE__*/__webpack_require__.n(external_Hammer_);\n\n// EXTERNAL MODULE: ./src/util/data/Vector2.ts\nvar Vector2 = __webpack_require__(80);\n\n// CONCATENATED MODULE: ./src/hooks/useTransform.ts\n\n\n\n\n\nconst getValueFromRange = (val, min, max) => Math.min(Math.max(min, val), max);\n\nconst getTargetValue = (val, targetVal, dt) => Math.abs(val - targetVal) < dt ? targetVal : val;\n\nconst scaleFun = (val, center, scale) => {\n  const valVec = Vector2["a" /* Vector2 */].subtract(val, center);\n  return Vector2["a" /* Vector2 */].add(Vector2["a" /* Vector2 */].multipy(valVec, scale), center);\n};\n\nconst rotateFun = (val, center, rotate) => {\n  const valVec = Vector2["a" /* Vector2 */].subtract(val, center);\n  return Vector2["a" /* Vector2 */].add(Vector2["a" /* Vector2 */].rotate(valVec, rotate), center);\n};\n\nconst translateFun = (val, center, translate, scale, rotate) => {\n  return Vector2["a" /* Vector2 */].add(rotateFun(scaleFun(val, center, scale), center, rotate), translate);\n};\n\nconst zero = new Vector2["a" /* Vector2 */](); // console.log(\'translateFun: \', translateFun(new Vector2(0,1), zero, zero, 2, 90))\n\n/**\n * 当transform-origin的改变（用户旋转操作时会发生）,此时scale或rotate有值会导致图像抖动，该方法可以获取修正后的transform。\n */\n\nconst getNewTranslate = (preCenter, newCenter, translate, scale, rotate) => {\n  const preVec = translateFun(new Vector2["a" /* Vector2 */](), preCenter, translate, scale, rotate);\n  const newVec = translateFun(new Vector2["a" /* Vector2 */](), newCenter, translate, scale, rotate);\n  return Vector2["a" /* Vector2 */].add(Vector2["a" /* Vector2 */].subtract(newVec, preVec), translate);\n};\n\nconst TRANSACTION = \'transform 0.1s\';\nfunction useTransform(userTransformProps) {\n  const {\n    maxScale = 2,\n    minScale = 0.5,\n    transRef,\n    viewRef\n  } = userTransformProps || {}; // const wrapRef = useRef<WrapElement>(null)\n  // const contentRef = useRef<ContentElement>(null)\n\n  const transformInfoRef = Object(external_React_["useRef"])({\n    /**\n     * 旋转开始时手势的rotate, 用于计算手势的rotate差值.\n     */\n    gestrueStartRotate: 0,\n\n    /**\n     * 旋转开始时元素的rotate，用于计算元素旋转的差值.\n     */\n    eleStartRotate: 0,\n\n    /**\n     *即将渲染的rotate.\n     */\n    rotate: 0,\n\n    /**\n     * 缩放开始时的手势识别的缩放值.\n     */\n    gestrueStartscale: 1,\n\n    /**\n     * 缩放开始时元素的缩放值.\n     */\n    eleStartScale: 1,\n\n    /**\n     * 渲染的缩放值.\n     */\n    scale: minScale,\n    gestrueStartTranslate: new Vector2["a" /* Vector2 */](),\n    eleStartTanslate: new Vector2["a" /* Vector2 */](),\n    translate: new Vector2["a" /* Vector2 */](),\n\n    /**\n     * 旋转中心点.\n     */\n    center: new Vector2["a" /* Vector2 */]()\n  });\n  Object(external_React_["useEffect"])(() => {\n    if (!(viewRef === null || viewRef === void 0 ? void 0 : viewRef.current)) return;\n\n    if (transRef && transRef.current) {\n      const computedStyle = getComputedStyle(transRef.current);\n      /**\n       * 默认的transform中心点.\n       */\n\n      transformInfoRef.current.center = new Vector2["a" /* Vector2 */](parseFloat(computedStyle.width) * 0.5, parseFloat(computedStyle.height) * 0.5);\n      /**\n       * 添加操作时的动画，增强体验流畅度.\n       */\n\n      transRef.current.style.transition = TRANSACTION;\n      const mainManager = new external_Hammer_default.a.Manager(viewRef.current);\n      mainManager.add(new external_Hammer_default.a.Pan({\n        threshold: 0,\n        pointers: 2,\n        enable: (_, data) => {\n          if (data && data.pointers.length > 1) {\n            const {\n              pointers: [p1, p2]\n            } = data;\n            console.log(Vector2["a" /* Vector2 */].dist(p1, p2));\n            return Vector2["a" /* Vector2 */].dist(p1, p2) < 200;\n          }\n\n          return false;\n        }\n      })); // mainManager.add(new Hammer.Rotate()).recognizeWith(mainManager.get(\'pan\'))\n\n      mainManager.add(new external_Hammer_default.a.Pinch({\n        enable: (_, data) => {\n          if (data && data.pointers.length > 1) {\n            const {\n              pointers: [p1, p2]\n            } = data;\n            console.log(Vector2["a" /* Vector2 */].dist(p1, p2));\n            return Vector2["a" /* Vector2 */].dist(p1, p2) > 200;\n          }\n\n          return false;\n        }\n      })).recognizeWith([mainManager.get(\'pan\')]);\n\n      const requestUpdate = throttle_default()(() => new Promise(resolve => {\n        requestAnimationFrame(() => {\n          if (!transRef.current) return;\n          const {\n            rotate,\n            scale,\n            translate: {\n              x: transformX,\n              y: transformY\n            },\n            center\n          } = transformInfoRef.current;\n          transRef.current.style.transform = `translate3d( ${transformX}px, ${transformY}px, 0)  scale(${scale}) rotate(${rotate}deg)`; // transRef.current.style.transformOrigin = `${center.x}px ${center.y}px`\n\n          resolve(); // console.log(\'translate: \', transformInfoRef.current.translate)\n          // console.log(\'center: \', transformInfoRef.current.center)\n        });\n      }), 10);\n\n      const onPanStart = ({\n        deltaX,\n        deltaY\n      }) => {\n        const {\n          translate\n        } = transformInfoRef.current;\n        transformInfoRef.current.gestrueStartTranslate = new Vector2["a" /* Vector2 */](deltaX, deltaY);\n        transformInfoRef.current.eleStartTanslate = translate;\n\n        if (transRef.current) {\n          transRef.current.style.transition = \'\';\n          requestAnimationFrame(() => {\n            if (transRef.current) {\n              transRef.current.style.transition = TRANSACTION;\n            }\n          });\n        }\n      };\n\n      const onPan = ({\n        deltaX,\n        deltaY,\n        center\n      }) => {\n        const {\n          scale,\n          gestrueStartTranslate,\n          eleStartTanslate\n        } = transformInfoRef.current;\n        const valX = eleStartTanslate.x + (deltaX - gestrueStartTranslate.x);\n        const valY = eleStartTanslate.y + (deltaY - gestrueStartTranslate.y);\n        const translate = scale == 1 ? new Vector2["a" /* Vector2 */](getTargetValue(valX, 0, 10), getTargetValue(valY, 0, 10)) : new Vector2["a" /* Vector2 */](valX, valY);\n        transformInfoRef.current.translate = translate;\n        requestUpdate();\n      }; // const onRotateStart = async ({rotation, center}: HammerInput) => {\n      //     const { rotate, translate, center: preCenter, scale } = transformInfoRef.current\n      //     transformInfoRef.current.eleStartRotate = rotate\n      //     transformInfoRef.current.gestrueStartRotate = rotation\n      //     const newCenter = Vector2.subtract(center, translate)\n      //     transformInfoRef.current.translate = getNewTranslate(preCenter, newCenter, translate, scale, rotate)\n      //     transformInfoRef.current.center = newCenter\n      //     await requestUpdate()\n      //     if(wrapRef.current){\n      //         wrapRef.current.style.transition = \'\'\n      //         requestAnimationFrame(() => {\n      //             if(wrapRef.current){\n      //                 wrapRef.current.style.transition = TRANSACTION\n      //             }\n      //         } )\n      //     }\n      // }\n      // const onRotate = ({rotation}: HammerInput) => { \n      //     const { gestrueStartRotate, eleStartRotate, translate } =  transformInfoRef.current\n      //     const deltaRotateion = rotation - gestrueStartRotate\n      //     const rotateVal = eleStartRotate +  deltaRotateion\n      //     transformInfoRef.current.rotate = getTargetValue(rotateVal, 0, 10 )\n      //     requestUpdate()\n      // }\n\n\n      const onPinchStart = async ({\n        scale,\n        center\n      }) => {\n        const {\n          translate,\n          scale: slScale,\n          center: preCenter,\n          rotate\n        } = transformInfoRef.current;\n        transformInfoRef.current.gestrueStartscale = scale;\n        transformInfoRef.current.eleStartScale = slScale;\n        const newCenter = Vector2["a" /* Vector2 */].subtract(center, translate);\n        transformInfoRef.current.translate = getNewTranslate(preCenter, newCenter, translate, scale, rotate);\n        transformInfoRef.current.center = newCenter;\n        await requestUpdate();\n\n        if (transRef.current) {\n          transRef.current.style.transition = \'\';\n          requestAnimationFrame(() => {\n            if (transRef.current) {\n              transRef.current.style.transition = TRANSACTION;\n            }\n          });\n        }\n      };\n\n      const onPinchinMove = ({\n        scale,\n        center\n      }) => {\n        const {\n          eleStartScale,\n          gestrueStartscale,\n          translate\n        } = transformInfoRef.current;\n        const deltaScale = scale - gestrueStartscale;\n        const scaleVal = getValueFromRange(eleStartScale + deltaScale, minScale, maxScale);\n        transformInfoRef.current.scale = getTargetValue(scaleVal, 1, 0.2);\n        requestUpdate();\n      };\n\n      mainManager.on(\'panstart\', onPanStart);\n      mainManager.on(\'panmove\', onPan); // mainManager.on(\'rotatestart\', onRotateStart)\n      // mainManager.on(\'rotate\', onRotate)\n\n      mainManager.on(\'pinchstart\', onPinchStart);\n      mainManager.on(\'pinchmove\', onPinchinMove);\n      requestUpdate();\n      return () => {\n        mainManager.off(\'panstart\', onPanStart);\n        mainManager.off(\'panmove\', onPan); // mainManager.off(\'rotatestart\', onRotateStart)\n        // mainManager.off(\'rotate\', onRotate)\n\n        mainManager.off(\'pinchstart\', onPinchStart);\n        mainManager.off(\'pinchmove\', onPinchinMove);\n      };\n    }\n  }, [...Object.values(userTransformProps || {})]);\n}\n// EXTERNAL MODULE: ./src/pages/paint/pcanvas/pcnvas.controller.ts + 1 modules\nvar pcnvas_controller = __webpack_require__(25);\n\n// EXTERNAL MODULE: external "antd"\nvar external_antd_ = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/pages/paint/pcanvas/index.tsx\n\n\n\n\n\n\nconst usePCanvas = () => {\n  const {\n    current: pCanvas\n  } = Object(external_React_["useRef"])(new pcnvas_controller["PCanvasController"]());\n  return {\n    pCanvas\n  };\n};\n/**\n * 手绘编辑器的画板.\n */\n\n\nconst PCanvas = ({\n  initValue,\n  pCanvasController,\n  loading\n}) => {\n  const coverRef = Object(external_React_["useRef"])(null);\n  const wrapRef = Object(external_React_["useRef"])(null);\n  const viewRef = Object(external_React_["useRef"])(null);\n  const [minScale, setMinScale] = Object(external_React_["useState"])(0.1);\n  useTransform({\n    minScale,\n    maxScale: 1,\n    viewRef,\n    transRef: wrapRef,\n    scaleRef: wrapRef\n  });\n  Object(external_React_["useEffect"])(() => {\n    if (!initValue) return;\n\n    if (pCanvasController && wrapRef.current && coverRef.current) {\n      const wrapInfo = {\n        wrap: wrapRef.current,\n        cover: coverRef.current\n      };\n      pCanvasController.init(wrapInfo, initValue);\n      return () => {};\n    }\n  }, [initValue]);\n  Object(external_React_["useEffect"])(() => {\n    if (!initValue) return;\n    const cover = coverRef.current;\n\n    if (cover) {\n      const onPointerDown = pointEvent => {\n        if (pCanvasController) {\n          pCanvasController.onPointerDown(pointEvent);\n        }\n      };\n\n      const onPointerMove = pointEvent => {\n        if (pCanvasController) {\n          pCanvasController.onPointerMove(pointEvent);\n        }\n      };\n\n      const onPointerUp = pointEvent => {\n        if (pCanvasController) {\n          pCanvasController.onPointerUp(pointEvent);\n        }\n      };\n\n      cover.addEventListener(\'pointerdown\', onPointerDown, {\n        passive: false\n      });\n      cover.addEventListener(\'pointermove\', onPointerMove, {\n        passive: false\n      });\n      cover.addEventListener(\'pointerup\', onPointerUp, {\n        passive: false\n      });\n      return () => {\n        cover.removeEventListener(\'pointerdown\', onPointerDown);\n        cover.removeEventListener(\'pointermove\', onPointerMove);\n        cover.removeEventListener(\'pointerup\', onPointerUp);\n      };\n    }\n  }, [coverRef.current, initValue]);\n  return external_React_default.a.createElement("main", {\n    ref: viewRef,\n    className: style_default.a.pCanvas\n  }, external_React_default.a.createElement("section", {\n    ref: wrapRef,\n    className: style_default.a.canvasWrap\n  }, external_React_default.a.createElement("div", {\n    ref: coverRef,\n    className: style_default.a.cover\n  })), loading && external_React_default.a.createElement("div", {\n    className: style_default.a.mask,\n    onMouseMove: ({\n      nativeEvent\n    }) => nativeEvent.stopPropagation()\n  }, external_React_default.a.createElement(external_antd_["Spin"], null)));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n')},21:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA", function() { return RGBA; });\nclass RGBA {\n  static Lerp(from, to, number) {\n    const result = [];\n    const dtR = (to.r - from.r) / number;\n    const dtG = (to.g - from.g) / number;\n    const dtB = (to.b - from.b) / number;\n    const dtA = (to.a - from.a) / number;\n\n    for (let i = 0; i < number; i++) {\n      result.push(new RGBA(from.r + dtR * i, from.g + dtG * i, from.b + dtB * i, from.a + dtA * i));\n    }\n\n    return result;\n  }\n\n  static mutipy({\n    r,\n    g,\n    b\n  }, percent) {\n    return new RGBA(r * percent, g * percent, b * percent);\n  }\n\n  static add({\n    r,\n    g,\n    b\n  }, B) {\n    return new RGBA(r + B.r, g + B.g, b + B.b);\n  }\n  /**\n   * 将a倾向b颜色，percent表示程度，当为1时，则为颜色.\n   * @param a \n   * @param b \n   * @param percent \n   */\n\n\n  static mix(a, b, percent) {\n    return new RGBA(a.r + (b.r - a.r) * percent, a.g + (b.g - a.g) * percent, a.b + (b.b - a.b) * percent);\n  }\n\n  static getLerpColor(from, to, percent) {\n    const {\n      r,\n      g,\n      b,\n      a\n    } = from;\n    return new RGBA((to.r - r) * percent + r, (to.g - g) * percent + g, (to.b - b) * percent + b, (to.a - a) * percent + a);\n  }\n\n  constructor(r, g, b, a = 1) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  toRGBAString() {\n    return `rgba(${this.r},${this.g},${this.b},${this.a})`;\n  }\n\n}\nRGBA.BLACK = new RGBA(0, 0, 0);\nRGBA.WHITE = new RGBA(255, 255, 255);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcGFpbnQvdG9wLXRvb2wtYmFyL3Rvb2wtaXRlbS9jb2xvci1zZWxlY3Rvci9yZ2JhLnRzP2RjNzgiXSwibmFtZXMiOlsiUkdCQSIsIkxlcnAiLCJmcm9tIiwidG8iLCJudW1iZXIiLCJyZXN1bHQiLCJkdFIiLCJyIiwiZHRHIiwiZyIsImR0QiIsImIiLCJkdEEiLCJhIiwiaSIsInB1c2giLCJtdXRpcHkiLCJwZXJjZW50IiwiYWRkIiwiQiIsIm1peCIsImdldExlcnBDb2xvciIsImNvbnN0cnVjdG9yIiwidG9SR0JBU3RyaW5nIiwiQkxBQ0siLCJXSElURSJdLCJtYXBwaW5ncyI6IkFBQ0E7QUFBQTtBQUFPLE1BQU1BLElBQU4sQ0FBVztBQUVqQixTQUFPQyxJQUFQLENBQVlDLElBQVosRUFBd0JDLEVBQXhCLEVBQWtDQyxNQUFsQyxFQUFpRDtBQUNoRCxVQUFNQyxNQUFhLEdBQUcsRUFBdEI7QUFDQSxVQUFNQyxHQUFHLEdBQUcsQ0FBQ0gsRUFBRSxDQUFDSSxDQUFILEdBQUtMLElBQUksQ0FBQ0ssQ0FBWCxJQUFjSCxNQUExQjtBQUNBLFVBQU1JLEdBQUcsR0FBRyxDQUFDTCxFQUFFLENBQUNNLENBQUgsR0FBS1AsSUFBSSxDQUFDTyxDQUFYLElBQWNMLE1BQTFCO0FBQ0EsVUFBTU0sR0FBRyxHQUFHLENBQUNQLEVBQUUsQ0FBQ1EsQ0FBSCxHQUFLVCxJQUFJLENBQUNTLENBQVgsSUFBY1AsTUFBMUI7QUFDQSxVQUFNUSxHQUFHLEdBQUcsQ0FBQ1QsRUFBRSxDQUFDVSxDQUFILEdBQUtYLElBQUksQ0FBQ1csQ0FBWCxJQUFjVCxNQUExQjs7QUFDQSxTQUFJLElBQUlVLENBQUMsR0FBRSxDQUFYLEVBQWNBLENBQUMsR0FBRVYsTUFBakIsRUFBeUJVLENBQUMsRUFBMUIsRUFBNkI7QUFDNUJULFlBQU0sQ0FBQ1UsSUFBUCxDQUFZLElBQUlmLElBQUosQ0FDWEUsSUFBSSxDQUFDSyxDQUFMLEdBQVNELEdBQUcsR0FB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ZW50IjpbIlxuZXhwb3J0IGNsYXNzIFJHQkEge1xuXG5cdHN0YXRpYyBMZXJwKGZyb206IFJHQkEsIHRvOiBSR0JBLCBudW1iZXI6IG51bWJlcil7XG5cdFx0Y29uc3QgcmVzdWx0OlJHQkFbXSA9IFtdXG5cdFx0Y29uc3QgZHRSID0gKHRvLnItZnJvbS5yKS9udW1iZXJcblx0XHRjb25zdCBkdEcgPSAodG8uZy1mcm9tLmcpL251bWJlclxuXHRcdGNvbnN0IGR0QiA9ICh0by5iLWZyb20uYikvbnVtYmVyXG5cdFx0Y29uc3QgZHRBID0gKHRvLmEtZnJvbS5hKS9udW1iZXJcblx0XHRmb3IobGV0IGkgPTA7IGk8IG51bWJlcjsgaSsrKXtcblx0XHRcdHJlc3VsdC5wdXNoKG5ldyBSR0JBKFxuXHRcdFx0XHRmcm9tLnIgKyBkdFIgKmksXG5cdFx0XHRcdGZyb20uZyArIGR0RyAqaSxcblx0XHRcdFx0ZnJvbS5iICsgZHRCICppLFxuXHRcdFx0XHRmcm9tLmEgKyBkdEEgKmksXG5cdFx0XHQpKVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0XG5cdH1cblxuXHRzdGF0aWMgbXV0aXB5KHtyLGcsYn06UkdCQSwgcGVyY2VudDogbnVtYmVyKXtcblx0XHRyZXR1cm4gbmV3IFJHQkEocipwZXJjZW50LCBnICogcGVyY2VudCwgYiAqcGVyY2VudClcblx0fVxuXG5cdHN0YXRpYyBhZGQoe3IsZyxifTogUkdCQSwgQjogUkdCQSl7XG5cdFx0cmV0dXJuIG5ldyBSR0JBKHIrQi5yLCBnK0IuZywgYitCLmIgKVxuXHR9XG5cblx0LyoqXG5cdCAqIOWwhmHlgL7lkJFi6aKc6Imy77yMcGVyY2VudOihqOekuueoi+W6pu+8jOW9k+S4ujHml7bvvIzliJnkuLrpopzoibIuXG5cdCAqIEBwYXJhbSBhIFxuXHQgKiBAcGFyYW0gYiBcblx0ICogQHBhcmFtIHBlcmNlbnQgXG5cdCAqL1xuXHRzdGF0aWMgbWl4KGE6UkdCQSxiOlJHQkEsIHBlcmNlbnQ6IG51bWJlcil7XG5cdFx0cmV0dXJuIG5ldyBSR0JBKFxuXHRcdFx0YS5yICsgKGIuci1hLnIpICogcGVyY2VudCxcblx0XHRcdGEuZyArIChiLmctYS5nKSAqIHBlcmNlbnQsXG5cdFx0XHRhLmIgKyAoYi5iLWEuYikgKiBwZXJjZW50XG5cdFx0KVxuXHR9XG5cblx0c3RhdGljIGdldExlcnBDb2xvcihmcm9tOiBSR0JBLCB0bzpSR0JBLCBwZXJjZW50OiBudW1iZXIpe1xuXHRcdGNvbnN0IHtyLGcsYixhfSA9IGZyb21cblx0XHRyZXR1cm4gbmV3IFJHQkEoXG5cdFx0XHQodG8uciAtcikqcGVyY2VudCArIHIsXG5cdFx0XHQodG8uZyAtZykqcGVyY2VudCArIGcsXG5cdFx0XHQodG8uYiAtYikqcGVyY2VudCArIGIsXG5cdFx0XHQodG8uYSAtYSkqcGVyY2VudCArIGEsXG5cdFx0KVxuXHR9XG5cbiAgc3RhdGljIHJlYWRvbmx5IEJMQUNLID0gbmV3IFJHQkEoMCwwLDApXG4gIFxuICBzdGF0aWMgcmVhZG9ubHkgV0hJVEUgPSBuZXcgUkdCQSgyNTUsMjU1LDI1NSlcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHI6IG51bWJlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgZzogbnVtYmVyLFxuICAgIHB1YmxpYyByZWFkb25seSBiOiBudW1iZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IGE6IG51bWJlciA9IDEsXG4gICl7fVxuXG4gIHRvUkdCQVN0cmluZygpe1xuICBcdHJldHVybiBgcmdiYSgke3RoaXMucn0sJHt0aGlzLmd9LCR7dGhpcy5ifSwke3RoaXMuYX0pYFxuICB9XG5cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n')},22:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrushStatus", function() { return BrushStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrushType", function() { return BrushType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractBrush", function() { return AbstractBrush; });\nclass BrushStatus {\n  constructor(x, y, pressure, tiltX, tiltY) {\n    this.x = x;\n    this.y = y;\n    this.pressure = pressure;\n    this.tiltX = tiltX;\n    this.tiltY = tiltY;\n  }\n\n}\nlet BrushType;\n\n(function (BrushType) {\n  BrushType[BrushType["pen"] = 1] = "pen";\n  BrushType[BrushType["selector"] = 2] = "selector";\n})(BrushType || (BrushType = {}));\n\nclass AbstractBrush {\n  constructor(type, name) {\n    this.type = type;\n    this.name = name;\n  }\n\n  init() {}\n\n  destory() {}\n\n  onStart(status, context) {}\n\n  onDraw(brushStatus, contx) {}\n\n  onEnd(brushStatus, contx) {}\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcGFpbnQvdG9wLXRvb2wtYmFyL3Rvb2wtaXRlbS9icnVzaC90eXBlcy50cz9lMTdhIl0sIm5hbWVzIjpbIkJydXNoU3RhdHVzIiwiY29uc3RydWN0b3IiLCJ4IiwieSIsInByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsIkJydXNoVHlwZSIsIkFic3RyYWN0QnJ1c2giLCJ0eXBlIiwibmFtZSIsImluaXQiLCJkZXN0b3J5Iiwib25TdGFydCIsInN0YXR1cyIsImNvbnRleHQiLCJvbkRyYXciLCJicnVzaFN0YXR1cyIsImNvbnR4Iiwib25FbmQiXSwibWFwcGluZ3MiOiJBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQU8sTUFBTUEsV0FBTixDQUFrQjtBQUN2QkMsYUFBVyxDQUVTQyxDQUZULEVBSVNDLENBSlQsRUFNU0MsUUFOVCxFQVFTQyxLQVJULEVBVVNDLEtBVlQsRUFXVDtBQUFBLFNBVGtCSixDQVNsQixHQVRrQkEsQ0FTbEI7QUFBQSxTQVBrQkMsQ0FPbEIsR0FQa0JBLENBT2xCO0FBQUEsU0FMa0JDLFFBS2xCLEdBTGtCQSxRQUtsQjtBQUFBLFNBSGtCQyxLQUdsQixHQUhrQkEsS0FHbEI7QUFBQSxTQURrQkMsS0FDbEIsR0FEa0JBLEtBQ2xCO0FBQUc7O0FBWmtCO0FBZ0JsQixJQUFLQyxTQUFaOztXQUFZQSxTO0FBQUFBLFcsQ0FBQUEsUztBQUFBQSxXLENBQUFBLFM7R0FBQUEsUyxLQUFBQSxTOztBQU9MLE1BQWVDLGFBQWYsQ0FBNkI7QUFDbENQLGFBQVcsQ0FDT1EsSUFEUCxFQUVPQyxJQUZQLEVBR1Q7QUFBQSxTQUZnQkQsSUFFaEIsR0FGZ0JBLElBRWhCO0FBQUEsU0FEZ0JDLElBQ2hCLEdBRGdCQSxJQUNoQjtBQUFFOztBQUVKQyxNQUFJLEdBQVMsQ0FBRTs7QUFFZkMsU0FBTyxHQUFTLENBQUU7O0FBRWxCQyxTQUFPLENBQUNDLE1BQUQsRUFBc0JDLE9BQXRCLEVBQXFELENBQUU7O0FBRTlEQyxRQUFNLENBQUNDLFdBQUQsRUFBNkJDLEtBQTdCLEVBQXlELENBQUU7O0FBRWpFQyxPQUFLLENBQUNGLFdBQUQsRUFBMkJDLEtBQTNCLEVBQXdELENBQUU7O0FBZDdCIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUENhbnZhc0NvbnRleHQgfSBmcm9tIFwiQC9wYWdlcy9wYWludC9wY2FudmFzL3BjYW52YXMuY29udGV4dFwiXG5cbmV4cG9ydCBjbGFzcyBCcnVzaFN0YXR1cyB7XG4gIGNvbnN0cnVjdG9yKFxuXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgeDogbnVtYmVyLFxuXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgeTogbnVtYmVyLFxuXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgcHJlc3N1cmU6IG51bWJlcixcblxuICAgICAgcHVibGljIHJlYWRvbmx5IHRpbHRYOiBudW1iZXIsXG5cbiAgICAgIHB1YmxpYyByZWFkb25seSB0aWx0WTogbnVtYmVyLFxuICApIHsgfVxuXG59XG5cbmV4cG9ydCBlbnVtIEJydXNoVHlwZSB7XG5cbiAgcGVuID0gMSxcblxuICBzZWxlY3RvciA9IDIsXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEJydXNoIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IEJydXNoVHlwZSwgXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZ1xuICApIHt9XG5cbiAgaW5pdCgpOiB2b2lkIHt9XG5cbiAgZGVzdG9yeSgpOiB2b2lkIHt9XG5cbiAgb25TdGFydChzdGF0dXM6IEJydXNoU3RhdHVzLCBjb250ZXh0OiBQQ2FudmFzQ29udGV4dCk6IHZvaWQge31cblxuICBvbkRyYXcoYnJ1c2hTdGF0dXM6IEJydXNoU3RhdHVzW10sIGNvbnR4OiBQQ2FudmFzQ29udGV4dCk6IHZvaWR7fVxuXG4gIG9uRW5kKGJydXNoU3RhdHVzOiBCcnVzaFN0YXR1cywgY29udHg6IFBDYW52YXNDb250ZXh0KTogdm9pZCB7fVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n')},25:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"CanvasEvent\", function() { return /* binding */ CanvasEvent; });\n__webpack_require__.d(__webpack_exports__, \"PCanvasController\", function() { return /* binding */ pcnvas_controller_PCanvasController; });\n\n// EXTERNAL MODULE: ./src/pages/paint/top-tool-bar/tool-item/color-selector/rgba.ts\nvar rgba = __webpack_require__(21);\n\n// EXTERNAL MODULE: ./src/pages/paint/pcanvas/pcanvas.context.ts\nvar pcanvas_context = __webpack_require__(26);\n\n// EXTERNAL MODULE: ./src/workStorage/index.ts + 1 modules\nvar workStorage = __webpack_require__(59);\n\n// EXTERNAL MODULE: ./src/pages/paint/pcanvas/pcanvas.layer.ts\nvar pcanvas_layer = __webpack_require__(27);\n\n// EXTERNAL MODULE: ./node_modules/events/events.js\nvar events = __webpack_require__(76);\n\n// CONCATENATED MODULE: ./src/util/event.ts\n\nclass event_PEventEmiter {\n  constructor() {\n    this.eventEmitter = new events[\"EventEmitter\"]();\n  }\n\n  on(event, listener) {\n    const fun = listener;\n    this.eventEmitter.addListener(event, fun);\n  }\n\n  off(event, listener) {\n    const fun = listener;\n    this.eventEmitter.removeListener(event, fun);\n  }\n\n  emit(event, params) {\n    setTimeout(() => {\n      this.eventEmitter.emit(event, params);\n    }, 1);\n  }\n\n}\n// EXTERNAL MODULE: ./src/util/canvas.ts\nvar util_canvas = __webpack_require__(47);\n\n// EXTERNAL MODULE: ./src/pages/paint/top-tool-bar/tool-item/brush/types.ts\nvar types = __webpack_require__(22);\n\n// CONCATENATED MODULE: ./src/pages/paint/pcanvas/pcnvas.controller.ts\n\n\n\n\n\n\n\nclass CanvasEvent {\n  constructor(data, tag = 'user') {\n    this.data = data;\n    this.tag = tag;\n  }\n\n}\n\nconst pointEvent2BrunshStatus = ({\n  offsetX: x,\n  offsetY: y,\n  tiltX,\n  tiltY,\n  pressure\n}) => {\n  // console.log('pressure...', pressure)\n  pressure = pressure > 1 ? pressure * 0.01 : pressure === 0 ? 1 : pressure;\n  return new types[\"BrushStatus\"](x, y, pressure, tiltX, tiltY);\n};\n\n/**\n * 用于控制PCanvascontroller component 的对象.\n * \n * // TODO\n * 对的操作放入组件中.\n */\nclass pcnvas_controller_PCanvasController extends event_PEventEmiter {\n  constructor(...args) {\n    super(...args);\n    this.context = void 0;\n    this.layerManager = void 0;\n    this.color = rgba[\"RGBA\"].BLACK;\n    this.pointerIds = {};\n    this.workId = void 0;\n\n    this.onBrushEnd = () => {\n      const curLayerDetail = this.layerManager.getFocusDetail();\n      const preContent = Object(util_canvas[\"a\" /* copyCanvas */])(curLayerDetail.canvas);\n      this.layerManager.applyTempCanvas();\n      const index = this.layerManager.layers.indexOf(curLayerDetail);\n      this.emit('contentChange', new CanvasEvent({\n        workId: this.workId,\n        layerDetail: curLayerDetail,\n        preContent,\n        index\n      }));\n    };\n  }\n\n  async init({\n    wrap,\n    cover\n  }, workDetail) {\n    const {\n      width,\n      height,\n      workId\n    } = workDetail.workInfo;\n    wrap.style.width = `${width}px`;\n    wrap.style.height = `${height}px`;\n    this.workId = workId;\n    this.layerManager = new pcanvas_layer[\"PcanvasLayers\"]({\n      cover,\n      wrap,\n      width,\n      height\n    });\n    this.layerManager.init(workDetail.layers);\n    this.context = new pcanvas_context[\"PCanvasContext\"](this.layerManager.getCanvas(), this.layerManager.getContext(), width, height, this.onBrushEnd);\n    this.emit('init', new CanvasEvent(null));\n    this.emit('focusLayer', new CanvasEvent({\n      layerDetail: this.layerManager.getFocusDetail()\n    })); // logCanvasData('init: ', this.layerManager.layers[0].canvas)\n  }\n\n  setColor({\n    r,\n    g,\n    b\n  }) {\n    const color = new rgba[\"RGBA\"](r, g, b, this.color.a);\n    this.setRGBA(color);\n  }\n\n  setRGBA(color) {\n    this.context.color = color.toRGBAString();\n    this.color = color;\n    this.emit('colorchange', new CanvasEvent({\n      color\n    }));\n  }\n\n  setOpacity(opacity) {\n    const {\n      r,\n      g,\n      b\n    } = this.color;\n    const color = new rgba[\"RGBA\"](r, g, b, opacity);\n    this.setRGBA(color);\n  }\n\n  async getLayers() {\n    return [...this.layerManager.layers];\n  }\n\n  addLayer() {\n    const layerDetail = this.layerManager.addLayer(workStorage[\"a\" /* LayerDetail */].create(this.layerManager.wrapInfo));\n    this.layerManager.focusLayer(layerDetail);\n    const index = this.layerManager.layers.indexOf(layerDetail);\n    this.emit('addLayer', new CanvasEvent({\n      workId: this.workId,\n      layerDetail,\n      index\n    }));\n    this.emit('focusLayer', new CanvasEvent({\n      layerDetail\n    }));\n  }\n\n  addLayerContent(index, canvas, creator = 'user') {\n    const {\n      width,\n      height\n    } = canvas;\n    const layerDetail = workStorage[\"a\" /* LayerDetail */].create({\n      width,\n      height\n    });\n    const ctx = layerDetail.canvas.getContext('2d');\n    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(canvas, 0, 0, width, height);\n    this.layerManager.addLayer(layerDetail, index);\n    this.emit('addLayer', new CanvasEvent({\n      workId: this.workId,\n      layerDetail,\n      index\n    }, creator));\n    return layerDetail;\n  }\n\n  setLayerContent(index, canvas, creator = 'user') {\n    const layerDetail = this.layerManager.layers[index];\n    const oldCanvas = layerDetail.canvas;\n    const {\n      width,\n      height\n    } = oldCanvas;\n    const preContent = Object(util_canvas[\"a\" /* copyCanvas */])(layerDetail.canvas);\n    const ctx = layerDetail.canvas.getContext('2d');\n    ctx === null || ctx === void 0 ? void 0 : ctx.clearRect(0, 0, width, height);\n    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(canvas, 0, 0, width, height);\n    this.emit('contentChange', new CanvasEvent({\n      workId: this.workId,\n      layerDetail,\n      index,\n      preContent\n    }, creator));\n    return layerDetail;\n  }\n\n  focusLayer(layerDetail) {\n    this.layerManager.focusLayer(layerDetail);\n    this.emit('focusLayer', new CanvasEvent({\n      layerDetail\n    }));\n  }\n\n  removeLayer(layerDetail, creator = 'user') {\n    const {\n      index,\n      isFocus\n    } = this.layerManager.removeLayer(layerDetail);\n    this.emit('removeLayer', new CanvasEvent({\n      workId: this.workId,\n      layerDetail,\n      index\n    }, creator));\n\n    if (isFocus) {\n      const layerDetail = this.layerManager.layers[0];\n      this.focusLayer(layerDetail);\n      this.emit('focusLayer', new CanvasEvent({\n        layerDetail\n      }, creator));\n    }\n  }\n\n  removeLayerByIndex(index, creator = 'user') {\n    const layerDetail = this.layerManager.layers[index];\n    this.removeLayer(layerDetail, creator);\n  }\n\n  setBrushWidth(width) {\n    this.context.brushWidth = width;\n  }\n\n  setBrush(brush) {\n    if (this.context.brush) {\n      this.context.brush.destory();\n    }\n\n    brush.init();\n    this.context.brush = brush;\n  }\n\n  onPointerDown(p) {\n    this.pointerIds[p.pointerId] = true;\n    const s = pointEvent2BrunshStatus(p); // console.log('f', s)\n\n    this.context.brush.onStart(s, this.context);\n  }\n\n  onPointerMove(pointerEvent) {\n    if (Object.keys(this.pointerIds).length > 1) return;\n    let ponterEvents;\n\n    if (pointerEvent.getCoalescedEvents) {\n      // console.log('getCoalescedEvents')\n      ponterEvents = pointerEvent.getCoalescedEvents();\n    } else {\n      // console.log('not getCoalescedEvents')\n      ponterEvents = [pointerEvent];\n    }\n\n    this.context.brush.onDraw(ponterEvents.map(p => pointEvent2BrunshStatus(p)), this.context);\n  }\n\n  onPointerUp(p) {\n    delete this.pointerIds[p.pointerId];\n    this.context.brush.onEnd(pointEvent2BrunshStatus(p), this.context);\n  }\n\n}\n\nfunction logCanvasData(rep = '', canvas) {\n  const ctx = canvas.getContext('2d');\n  console.log(rep, ctx === null || ctx === void 0 ? void 0 : ctx.getImageData(0, 0, 1, 1).data);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n")},26:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCanvasContext", function() { return PCanvasContext; });\n/* harmony import */ var _top_tool_bar_tool_item_color_selector_rgba__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);\n/* harmony import */ var _top_tool_bar_tool_item_brush__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);\n\n\nclass PCanvasContext {\n  constructor(curCanvas, curCanvasContext2D, width, height, onBrushEnd, brush = new _top_tool_bar_tool_item_brush__WEBPACK_IMPORTED_MODULE_1__["Brush"](), color = _top_tool_bar_tool_item_color_selector_rgba__WEBPACK_IMPORTED_MODULE_0__["RGBA"].BLACK.toRGBAString(), brushWidth = 100) {\n    this.curCanvas = curCanvas;\n    this.curCanvasContext2D = curCanvasContext2D;\n    this.width = width;\n    this.height = height;\n    this.onBrushEnd = onBrushEnd;\n    this.brush = brush;\n    this.color = color;\n    this.brushWidth = brushWidth;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcGFpbnQvcGNhbnZhcy9wY2FudmFzLmNvbnRleHQudHM/ZGE5OSJdLCJuYW1lcyI6WyJQQ2FudmFzQ29udGV4dCIsImNvbnN0cnVjdG9yIiwiY3VyQ2FudmFzIiwiY3VyQ2FudmFzQ29udGV4dDJEIiwid2lkdGgiLCJoZWlnaHQiLCJvbkJydXNoRW5kIiwiYnJ1c2giLCJCcnVzaCIsImNvbG9yIiwiUkdCQSIsIkJMQUNLIiwidG9SR0JBU3RyaW5nIiwiYnJ1c2hXaWR0aCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRU8sTUFBTUEsY0FBTixDQUFxQjtBQUV4QkMsYUFBVyxDQUVBQyxTQUZBLEVBT0FDLGtCQVBBLEVBU0FDLEtBVEEsRUFXQUMsTUFYQSxFQWFBQyxVQWJBLEVBZUFDLEtBQVksR0FBRyxJQUFJQyxtRUFBSixFQWZmLEVBaUJBQyxLQUFhLEdBQUdDLGdGQUFJLENBQUNDLEtBQUwsQ0FBV0MsWUFBWCxFQWpCaEIsRUFtQkFDLFVBQWtCLEdBQUcsR0FuQnJCLEVBc0JWO0FBQUEsU0FwQlVYLFNBb0JWLEdBcEJVQSxTQW9CVjtBQUFBLFNBZlVDLGtCQWVWLEdBZlVBLGtCQWVWO0FBQUEsU0FiVUMsS0FhVixHQWJVQSxLQWFWO0FBQUEsU0FYVUMsTUFXVixHQVhVQSxNQVdWO0FBQUEsU0FUVUMsVUFTVixHQVRVQSxVQVNWO0FBQUEsU0FQVUMsS0FPVixHQVBVQSxLQU9WO0FBQUEsU0FMVUUsS0FLVixHQUxVQSxLQUtWO0FBQUEsU0FIVUksVUFHVixHQUhVQSxVQUdWO0FBQUU7O0FBeEJxQiIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJHQkEgfSBmcm9tIFwiLi4vdG9wLXRvb2wtYmFyL3Rvb2wtaXRlbS9jb2xvci1zZWxlY3Rvci9yZ2JhXCI7XG5pbXBvcnQgeyBCcnVzaCB9IGZyb20gXCIuLi90b3AtdG9vbC1iYXIvdG9vbC1pdGVtL2JydXNoXCI7XG5cbmV4cG9ydCBjbGFzcyBQQ2FudmFzQ29udGV4dCB7XG5cbiAgICBjb25zdHJ1Y3RvcihcblxuICAgICAgICBwdWJsaWMgY3VyQ2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcblxuICAgICAgICAvKipcbiAgICAgICAgICog5b2T5YmN6YCJ5Lit5Zu+5bGC55qEY29udGV4dC5cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBjdXJDYW52YXNDb250ZXh0MkQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyB3aWR0aDogbnVtYmVyLFxuXG4gICAgICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcixcbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBvbkJydXNoRW5kOiAoKSA9PiB2b2lkLFxuXG4gICAgICAgIHB1YmxpYyBicnVzaDogQnJ1c2ggPSBuZXcgQnJ1c2goKSxcblxuICAgICAgICBwdWJsaWMgY29sb3I6IHN0cmluZyA9IFJHQkEuQkxBQ0sudG9SR0JBU3RyaW5nKCksXG5cbiAgICAgICAgcHVibGljIGJydXNoV2lkdGg6IG51bWJlciA9IDEwMCxcblxuXG4gICAgKXt9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n')},27:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PcanvasLayers\", function() { return PcanvasLayers; });\n/* harmony import */ var _workStorage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59);\n\nclass PcanvasLayers {\n  /**\n   * 临时图层,始终位于当前绘制图层的上方.\n   */\n\n  /**\n   * 当前绘制的图层.\n   */\n  constructor(wrapInfo) {\n    this.wrapInfo = wrapInfo;\n    this.tempLayer = void 0;\n    this.layers = void 0;\n    this.focusedLayerDetail = void 0;\n  }\n\n  async init(layers) {\n    const wrapInfo = this.wrapInfo;\n    const {\n      wrap,\n      cover\n    } = wrapInfo;\n    let lastElement = cover;\n    this.layers = layers;\n    layers.forEach((layer, index) => {\n      const {\n        canvas,\n        layerId,\n        visible\n      } = layer;\n      wrap.insertBefore(canvas, lastElement);\n      lastElement = canvas;\n\n      if (!visible) {\n        canvas.className = 'unvisible';\n      }\n    });\n    this.tempLayer = _workStorage__WEBPACK_IMPORTED_MODULE_0__[/* LayerDetail */ \"a\"].create(wrapInfo);\n    wrap.insertBefore(this.tempLayer.canvas, cover); // console.log('this.tempLayer: ', this.tempLayer.layerId)\n\n    this.focusedLayerDetail = layers[0];\n  }\n\n  getCanvas() {\n    return this.tempLayer.canvas;\n  }\n\n  applyTempCanvas() {\n    const ctx = this.focusedLayerDetail.canvas.getContext('2d');\n    const tempCtx = this.tempLayer.canvas.getContext('2d');\n\n    if (ctx && tempCtx) {\n      const {\n        width,\n        height\n      } = this.tempLayer.canvas;\n      ctx.drawImage(this.tempLayer.canvas, 0, 0, width, height);\n      tempCtx.clearRect(0, 0, width, height);\n    }\n  }\n\n  getFocusDetail() {\n    return this.focusedLayerDetail;\n  }\n\n  focusLayer(layerDetail) {\n    const nextLayer = this.layers[this.layers.indexOf(layerDetail) - 1];\n    const nextCanvas = nextLayer && nextLayer.canvas && nextLayer !== this.tempLayer ? nextLayer.canvas : this.wrapInfo.cover;\n    this.wrapInfo.wrap.insertBefore(this.tempLayer.canvas, nextCanvas);\n    this.focusedLayerDetail = layerDetail; // TOFIX: update templyer in layers.\n  }\n\n  addLayer(newLayer, index = 0) {\n    const {\n      wrap\n    } = this.wrapInfo;\n    const oldLayerDetail = this.layers[index - 1];\n    const ele = oldLayerDetail && oldLayerDetail.canvas || this.wrapInfo.cover;\n    wrap.insertBefore(newLayer.canvas, ele);\n    this.layers.splice(index, 0, newLayer);\n    return newLayer;\n  }\n\n  removeLayer(layerDetail) {\n    const index = this.layers.indexOf(layerDetail);\n\n    if (index > -1) {\n      this.wrapInfo.wrap.removeChild(layerDetail.canvas);\n      this.layers.splice(index, 1);\n    } else {\n      console.warn('layerDetail has been removed');\n    }\n\n    return {\n      index,\n      isFocus: this.focusedLayerDetail === layerDetail\n    };\n  }\n\n  getContext() {\n    const ctx = this.tempLayer.canvas.getContext('2d');\n\n    if (ctx === null) {\n      throw 'get context faliled.';\n    }\n\n    ctx.imageSmoothingEnabled = false;\n    return ctx;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n")},3:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Brush", function() { return Brush; });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(22);\n\n/**\n * 带压感的brush，bug待修复.\n * 根据移动，与context, 控制画出的形状并填充.\n */\n\nclass Brush {\n  constructor() {\n    this.type = _types__WEBPACK_IMPORTED_MODULE_0__["BrushType"].pen;\n    this.name = \'default\';\n    this.isPainting = false;\n    this.pathList = [];\n    this.animeHandle = void 0;\n\n    this.paintPath = ctx => {\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.beginPath();\n      const f = this.pathList[0];\n      ctx.moveTo(f.x, f.y);\n\n      for (let i = 1; i < this.pathList.length; i++) {\n        const {\n          x,\n          y\n        } = this.pathList[i];\n        ctx.lineTo(x, y);\n      }\n\n      ctx.stroke();\n    };\n  }\n\n  init() {}\n\n  destory() {}\n\n  onStart(status, context) {\n    const {\n      curCanvasContext2D: ctx,\n      color,\n      brushWidth\n    } = context;\n    this.isPainting = true;\n    this.pathList.push(status);\n    ctx.strokeStyle = color;\n    ctx.lineWidth = brushWidth;\n    ctx.lineCap = \'round\';\n    ctx.lineJoin = "round";\n  }\n\n  onDraw(brushStatus, contx) {\n    if (this.isPainting) {\n      const {\n        curCanvasContext2D: ctx\n      } = contx;\n\n      for (let i = 0; i < brushStatus.length; i++) {\n        this.pathList.push(brushStatus[i]);\n      }\n\n      cancelAnimationFrame(this.animeHandle);\n      this.animeHandle = requestAnimationFrame(() => {\n        this.paintPath(ctx);\n      });\n    }\n  }\n\n  onEnd(brushStatus, {\n    onBrushEnd\n  }) {\n    requestAnimationFrame(() => {\n      this.isPainting = false;\n      this.pathList = [];\n      onBrushEnd();\n    });\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcGFpbnQvdG9wLXRvb2wtYmFyL3Rvb2wtaXRlbS9icnVzaC9pbmRleC50cz8yMjY2Il0sIm5hbWVzIjpbIkJydXNoIiwidHlwZSIsIkJydXNoVHlwZSIsInBlbiIsIm5hbWUiLCJpc1BhaW50aW5nIiwicGF0aExpc3QiLCJhbmltZUhhbmRsZSIsInBhaW50UGF0aCIsImN0eCIsImNsZWFyUmVjdCIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiYmVnaW5QYXRoIiwiZiIsIm1vdmVUbyIsIngiLCJ5IiwiaSIsImxlbmd0aCIsImxpbmVUbyIsInN0cm9rZSIsImluaXQiLCJkZXN0b3J5Iiwib25TdGFydCIsInN0YXR1cyIsImNvbnRleHQiLCJjdXJDYW52YXNDb250ZXh0MkQiLCJjb2xvciIsImJydXNoV2lkdGgiLCJwdXNoIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJsaW5lQ2FwIiwibGluZUpvaW4iLCJvbkRyYXciLCJicnVzaFN0YXR1cyIsImNvbnR4IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvbkVuZCIsIm9uQnJ1c2hFbmQiXSwibWFwcGluZ3MiOiJBQUVBO0FBQUE7QUFBQTtBQUFBO0FBRUE7Ozs7O0FBSU8sTUFBTUEsS0FBTixDQUFzQztBQUFBO0FBQUEsU0FHaENDLElBSGdDLEdBR2RDLGdEQUFTLENBQUNDLEdBSEk7QUFBQSxTQUtoQ0MsSUFMZ0MsR0FLekIsU0FMeUI7QUFBQSxTQU8vQkMsVUFQK0IsR0FPbEIsS0FQa0I7QUFBQSxTQVMvQkMsUUFUK0IsR0FTVCxFQVRTO0FBQUEsU0FXL0JDLFdBWCtCOztBQUFBLFNBMkMvQkMsU0EzQytCLEdBMkNsQkMsR0FBRCxJQUFtQztBQUN2REEsU0FBRyxDQUFDQyxTQUFKLENBQWMsQ0FBZCxFQUFnQixDQUFoQixFQUFtQkQsR0FBRyxDQUFDRSxNQUFKLENBQVdDLEtBQTlCLEVBQXFDSCxHQUFHLENBQUNFLE1BQUosQ0FBV0UsTUFBaEQ7QUFDQUosU0FBRyxDQUFDSyxTQUFKO0FBQ0EsWUFBTUMsQ0FBQyxHQUFHLEtBQUtULFFBQUwsQ0FBYyxDQUFkLENBQVY7QUFDQUcsU0FBRyxDQUFDTyxNQUFKLENBQVdELENBQUMsQ0FBQ0UsQ0FBYixFQUFnQkYsQ0FBQyxDQUFDRyxDQUFsQjs7QUFDQSxXQUFLLElBQUlDLENBQUMsR0FBRSxDQUFaLEVBQWVBLENBQUMsR0FBRSxLQUFLYixRQUFMLENBQWNjLE1BQWhDLEVBQXdDRCxDQUFDLEVBQXpDLEVBQTZDO0FBQzNDLGNBQU07QUFBQ0YsV0FBRDtBQUFJQztBQUFKLFlBQVMsS0FBS1osUUFBTCxDQUFjYSxDQUFkLENBQWY7QUFDQVYsV0FBRyxDQUFDWSxNQUFKLENBQVdKLENBQVgsRUFBYUMsQ0FBYjtBQUNEOztBQUNEVCxTQUFHLENBQUNhLE1BQUo7QUFDRCxLQXJEd0M7QUFBQTs7QUFhekNDLE1BQUksR0FBRSxDQUFFOztBQUVSQyxTQUFPLEdBQUUsQ0FBRTs7QUFFWEMsU0FBTyxDQUFDQyxNQUFELEVBQXNCQyxPQUF0QixFQUErQztBQUNsRCxVQUFNO0FBQUNDLHdCQUFrQixFQUFFbkIsR0FBckI7QUFBMEJvQixXQUExQjtBQUFpQ0M7QUFBakMsUUFBK0NILE9BQXJEO0FBQ0EsU0FBS3RCLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxTQUFLQyxRQUFMLENBQWN5QixJQUFkLENBQW1CTCxNQUFuQjtBQUNBakIsT0FBRyxDQUFDdUIsV0FBSixHQUFrQkgsS0FBbEI7QUFDQXBCLE9BQUcsQ0FBQ3dCLFNBQUosR0FBZ0JILFVBQWhCO0FBQ0FyQixPQUFHLENBQUN5QixPQUFKLEdBQWEsT0FBYjtBQUNBekIsT0FBRyxDQUFDMEIsUUFBSixHQUFlLE9BQWY7QUFDSDs7QUFJREMsUUFBTSxDQUFDQyxXQUFELEVBQTZCQyxLQUE3QixFQUEwRDtBQUM5RCxRQUFHLEtBQUtqQyxVQUFSLEVBQW1CO0FBQ2YsWUFBTztBQUFFdUIsMEJBQWtCLEVBQUVuQjtBQUF0QixVQUE4QjZCLEtBQXJDOztBQUNBLFdBQUssSUFBSW5CLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUVrQixXQUFXLENBQUNqQixNQUEvQixFQUF1Q0QsQ0FBQyxFQUF4QyxFQUEyQztBQUN6QyxhQUFLYixRQUFMLENBQWN5QixJQUFkLENBQW9CTSxXQUFXLENBQUNsQixDQUFELENBQS9CO0FBQ0Q7O0FBQ0RvQiwwQkFBb0IsQ0FBQyxLQUFLaEMsV0FBTixDQUFwQjtBQUVBLFdBQUtBLFdBQUwsR0FBbUJpQyxxQkFBcUIsQ0FBQyxNQUFNO0FBQy9DLGFBQUtoQyxTQUFMLENBQWVDLEdBQWY7QUFDQyxPQUZ1QyxDQUF4QztBQUdIO0FBQ0Y7O0FBY0RnQyxPQUFLLENBQUNKLFdBQUQsRUFBMkI7QUFBQ0s7QUFBRCxHQUEzQixFQUF5RDtBQUM1REYseUJBQXFCLENBQUMsTUFBTTtBQUMxQixXQUFLbkMsVUFBTCxHQUFrQixLQUFsQjtBQUNBLFdBQUtDLFFBQUwsR0FBZ0IsRUFBaEI7QUFDQW9DLGdCQUFVO0FBQ1gsS0FKb0IsQ0FBckI7QUFLRDs7QUE3RHdDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQQ2FudmFzQ29udGV4dCB9IGZyb20gXCIuLi8uLi8uLi9wY2FudmFzL3BjYW52YXMuY29udGV4dFwiO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi91dGlsL2RhdGEvVmVjdG9yMlwiO1xuaW1wb3J0IHsgQnJ1c2hUeXBlLCBCcnVzaFN0YXR1cywgQWJzdHJhY3RCcnVzaCB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8qKlxuICog5bim5Y6L5oSf55qEYnJ1c2jvvIxidWflvoXkv67lpI0uXG4gKiDmoLnmja7np7vliqjvvIzkuI5jb250ZXh0LCDmjqfliLbnlLvlh7rnmoTlvaLnirblubbloavlhYUuXG4gKi9cbmV4cG9ydCBjbGFzcyBCcnVzaCAgaW1wbGVtZW50cyBBYnN0cmFjdEJydXNoIHtcblxuXG4gICAgcmVhZG9ubHkgdHlwZTogQnJ1c2hUeXBlID0gQnJ1c2hUeXBlLnBlblxuXG4gICAgcmVhZG9ubHkgbmFtZSA9ICdkZWZhdWx0J1xuXG4gICAgcHJvdGVjdGVkIGlzUGFpbnRpbmcgPSBmYWxzZVxuXG4gICAgcHJvdGVjdGVkIHBhdGhMaXN0OiBWZWN0b3IyW10gPSBbXVxuXG4gICAgcHJvdGVjdGVkIGFuaW1lSGFuZGxlOiBudW1iZXJcblxuICAgIGluaXQoKXt9XG5cbiAgICBkZXN0b3J5KCl7fVxuXG4gICAgb25TdGFydChzdGF0dXM6IEJydXNoU3RhdHVzLCBjb250ZXh0OiBQQ2FudmFzQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7Y3VyQ2FudmFzQ29udGV4dDJEOiBjdHgsIGNvbG9yLCBicnVzaFdpZHRofSA9IGNvbnRleHRcbiAgICAgICAgdGhpcy5pc1BhaW50aW5nID0gdHJ1ZVxuICAgICAgICB0aGlzLnBhdGhMaXN0LnB1c2goc3RhdHVzKVxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvclxuICAgICAgICBjdHgubGluZVdpZHRoID0gYnJ1c2hXaWR0aFxuICAgICAgICBjdHgubGluZUNhcCA9J3JvdW5kJ1xuICAgICAgICBjdHgubGluZUpvaW4gPSBcInJvdW5kXCI7XG4gICAgfVxuXG4gIFxuXG4gICAgb25EcmF3KGJydXNoU3RhdHVzOiBCcnVzaFN0YXR1c1tdLCBjb250eDogUENhbnZhc0NvbnRleHQpOiB2b2lkIHtcbiAgICAgIGlmKHRoaXMuaXNQYWludGluZyl7XG4gICAgICAgICAgY29uc3QgIHsgY3VyQ2FudmFzQ29udGV4dDJEOiBjdHggfSA9IGNvbnR4XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGk8IGJydXNoU3RhdHVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHRoaXMucGF0aExpc3QucHVzaCggYnJ1c2hTdGF0dXNbaV0pXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWVIYW5kbGUpXG5cbiAgICAgICAgICB0aGlzLmFuaW1lSGFuZGxlID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnBhaW50UGF0aChjdHgpO1xuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHBhaW50UGF0aCA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkgPT4ge1xuICAgICAgY3R4LmNsZWFyUmVjdCgwLDAsIGN0eC5jYW52YXMud2lkdGgsIGN0eC5jYW52YXMuaGVpZ2h0KVxuICAgICAgY3R4LmJlZ2luUGF0aCgpXG4gICAgICBjb25zdCBmID0gdGhpcy5wYXRoTGlzdFswXVxuICAgICAgY3R4Lm1vdmVUbyhmLngsIGYueSApXG4gICAgICBmb3IoIGxldCBpID0xOyBpPCB0aGlzLnBhdGhMaXN0Lmxlbmd0aDsgaSsrICl7XG4gICAgICAgIGNvbnN0IHt4LCB5fSA9IHRoaXMucGF0aExpc3RbaV1cbiAgICAgICAgY3R4LmxpbmVUbyh4LHkpXG4gICAgICB9XG4gICAgICBjdHguc3Ryb2tlKClcbiAgICB9XG5cbiAgICBvbkVuZChicnVzaFN0YXR1czogQnJ1c2hTdGF0dXMsIHtvbkJydXNoRW5kfTogUENhbnZhc0NvbnRleHQpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNQYWludGluZyA9IGZhbHNlXG4gICAgICAgIHRoaXMucGF0aExpc3QgPSBbXVxuICAgICAgICBvbkJydXNoRW5kKClcbiAgICAgIH0pXG4gICAgfVxuXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n')},45:function(module,exports,__webpack_require__){eval('// extracted by mini-css-extract-plugin\nmodule.exports = {"pCanvas":"pCanvas_efb40","mask":"mask_d19cf","canvasWrap":"canvasWrap_4e8dd","unvisible":"unvisible_0b5e4","cover":"cover_edb6c"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvcGFpbnQvcGNhbnZhcy9zdHlsZS5sZXNzP2E0MTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQkFBa0IiLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wicENhbnZhc1wiOlwicENhbnZhc19lZmI0MFwiLFwibWFza1wiOlwibWFza19kMTljZlwiLFwiY2FudmFzV3JhcFwiOlwiY2FudmFzV3JhcF80ZThkZFwiLFwidW52aXNpYmxlXCI6XCJ1bnZpc2libGVfMGI1ZTRcIixcImNvdmVyXCI6XCJjb3Zlcl9lZGI2Y1wifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45\n')},47:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return createCanvas; });\n/* unused harmony export setContent */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return copyCanvas; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return createImageByFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return toBlob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return emptyUrl; });\n/* harmony import */ var lodash_uniqueId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48);\n/* harmony import */ var lodash_uniqueId__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_uniqueId__WEBPACK_IMPORTED_MODULE_0__);\n\nconst createCanvas = (width = 0, height = 0, background) => {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  canvas.setAttribute('uuid', lodash_uniqueId__WEBPACK_IMPORTED_MODULE_0___default()('canvasId-'));\n  const ctx = canvas.getContext('2d');\n\n  if (ctx) {\n    if (background) {\n      ctx.fillStyle = background.toRGBAString();\n      ctx.fillRect(0, 0, width, height);\n    }\n  }\n\n  return canvas;\n};\nconst setContent = (des, source) => {\n  const ctx = des.getContext('2d');\n  console.log(source.width, source.height);\n  ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(source, 0, 0);\n};\nconst copyCanvas = canvas => {\n  const newC = document.createElement('canvas');\n  newC.width = canvas.width;\n  newC.height = canvas.height;\n  const ctx = newC.getContext('2d');\n\n  if (ctx) {\n    ctx.imageSmoothingEnabled = false;\n    ctx.clearRect(0, 0, newC.width, newC.height);\n    ctx.drawImage(canvas, 0, 0, canvas.width, canvas.height);\n  }\n\n  return newC;\n};\nconst deCodeImageTask = [];\nlet decodingNumber = 0;\n\nconst handleDecodeTask = async () => {\n  if (decodingNumber < 1) {\n    let task = deCodeImageTask.shift();\n\n    while (task) {\n      decodingNumber++;\n      const {\n        file,\n        cb\n      } = task;\n      const img = new Image();\n      img.src = URL.createObjectURL(file);\n\n      try {\n        await img.decode();\n      } catch (e) {\n        console.error(e, 'img decode error', e.message);\n      }\n\n      URL.revokeObjectURL(img.src);\n      cb(img);\n      decodingNumber--;\n      task = deCodeImageTask.shift(); // console.log(decodingNumber,deCodeImageTask.length )\n    }\n  }\n};\n/**\n * 由于浏览器img解码内存限制，控制解码的并发.\n * @param canvasFile \n */\n\n\nconst createImageByFile = async canvasFile => {\n  return new Promise(cb => {\n    deCodeImageTask.push({\n      file: canvasFile,\n      cb\n    });\n    handleDecodeTask();\n  });\n};\nconst toBlob = canvas => {\n  return new Promise(resolve => {\n    canvas.toBlob(resolve, 'image/png', 1);\n  });\n};\n\nlet _emptyUrl = () => {\n  const canvas = createCanvas(0, 0);\n  const str = canvas.toDataURL();\n\n  _emptyUrl = () => str;\n\n  return _emptyUrl();\n};\n\nconst emptyUrl = () => {\n  return _emptyUrl();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9jYW52YXMudHM/OWQwMiJdLCJuYW1lcyI6WyJjcmVhdGVDYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsImJhY2tncm91bmQiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJjdHgiLCJnZXRDb250ZXh0IiwiZmlsbFN0eWxlIiwidG9SR0JBU3RyaW5nIiwiZmlsbFJlY3QiLCJzZXRDb250ZW50IiwiZGVzIiwic291cmNlIiwiY29uc29sZSIsImxvZyIsImRyYXdJbWFnZSIsImNvcHlDYW52YXMiLCJuZXdDIiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiY2xlYXJSZWN0IiwiZGVDb2RlSW1hZ2VUYXNrIiwiZGVjb2RpbmdOdW1iZXIiLCJoYW5kbGVEZWNvZGVUYXNrIiwidGFzayIsInNoaWZ0IiwiZmlsZSIsImNiIiwiaW1nIiwiSW1hZ2UiLCJzcmMiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJkZWNvZGUiLCJlIiwiZXJyb3IiLCJtZXNzYWdlIiwicmV2b2tlT2JqZWN0VVJMIiwiY3JlYXRlSW1hZ2VCeUZpbGUiLCJjYW52YXNGaWxlIiwiUHJvbWlzZSIsInB1c2giLCJ0b0Jsb2IiLCJyZXNvbHZlIiwiX2VtcHR5VXJsIiwic3RyIiwidG9EYXRhVVJMIiwiZW1wdHlVcmwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUlPLE1BQU1BLFlBQVksR0FBRyxDQUFDQyxLQUFLLEdBQUcsQ0FBVCxFQUFZQyxNQUFNLEdBQUUsQ0FBcEIsRUFBdUJDLFVBQXZCLEtBQTZDO0FBQ3JFLFFBQU1DLE1BQU0sR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLFFBQXZCLENBQWY7QUFDQUYsUUFBTSxDQUFDSCxLQUFQLEdBQWVBLEtBQWY7QUFDQUcsUUFBTSxDQUFDRixNQUFQLEdBQWdCQSxNQUFoQjtBQUNBRSxRQUFNLENBQUNHLFlBQVAsQ0FBb0IsTUFBcEIsRUFBNEIsdURBQVMsV0FB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QUFDekNOLG1CQUFlLENBQUNvQixJQUFoQixDQUFzQjtBQUFDZixVQUFJLEVBQUNhLFVBQU47QUFBa0JaO0FBQWxCLEtBQXRCO0FBQ0FKLG9CQUFnQjtBQUNqQixHQUhNLENBQVA7QUFLRCxDQU5NO0FBU0EsTUFBTW1CLE1BQU0sR0FBSXhDLE1BQUQsSUFBK0I7QUFDakQsU0FBTyxJQUFJc0MsT0FBSixDQUF5QkcsT0FBTyxJQUFJO0FBQ3ZDekMsVUFBTSxDQUFDd0MsTUFBUCxDQUFjQyxPQUFkLEVBQXVCLFdBQXZCLEVBQW9DLENBQXBDO0FBQ0gsR0FGTSxDQUFQO0FBR0gsQ0FKTTs7QUFNUCxJQUFJQyxTQUFTLEdBQUcsTUFBYTtBQUN6QixRQUFNMUMsTUFBTSxHQUFHSixZQUFZLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBM0I7QUFDQSxRQUFNK0MsR0FBRyxHQUFJM0MsTUFBTSxDQUFDNEMsU0FBUCxFQUFiOztBQUNBRixXQUFTLEdBQUcsTUFBTUMsR0FBbEI7O0FBQ0EsU0FBT0QsU0FBUyxFQUFoQjtBQUNILENBTEQ7O0FBT08sTUFBTUcsUUFBUSxHQUFHLE1BQU07QUFDM0IsU0FBT0gsU0FBUyxFQUFoQjtBQUNGLENBRk0iLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSR0JBIH0gZnJvbSBcIi4uL3BhZ2VzL3BhaW50L3RvcC10b29sLWJhci90b29sLWl0ZW0vY29sb3Itc2VsZWN0b3IvcmdiYVwiXG5pbXBvcnQge3VuaXF1ZUlkfSBmcm9tICdsb2Rhc2gnXG5cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNhbnZhcyA9ICh3aWR0aCA9IDAsIGhlaWdodCA9MCwgYmFja2dyb3VuZD86IFJHQkEpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoXG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodFxuICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3V1aWQnLCB1bmlxdWVJZCgnY2FudmFzSWQtJykpXG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgICAgIGlmKGN0eCl7XG4gICAgICAgICAgICBpZihiYWNrZ3JvdW5kKXtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZC50b1JHQkFTdHJpbmcoKVxuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdCgwLDAsd2lkdGgsaGVpZ2h0KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgcmV0dXJuIGNhbnZhc1xufVxuXG5leHBvcnQgY29uc3Qgc2V0Q29udGVudCA9IChkZXM6IEhUTUxDYW52YXNFbGVtZW50LCBzb3VyY2U6IEhUTUxDYW52YXNFbGVtZW50fCBIVE1MSW1hZ2VFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgY3R4ID0gZGVzLmdldENvbnRleHQoJzJkJylcbiAgICBjb25zb2xlLmxvZyhzb3VyY2Uud2lkdGgsIHNvdXJjZS5oZWlnaHQpXG4gICAgY3R4Py5kcmF3SW1hZ2Uoc291cmNlLCAwLCAwKVxufVxuXG5leHBvcnQgY29uc3QgY29weUNhbnZhcyA9IChjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50fCBIVE1MSW1hZ2VFbGVtZW50KSA9PntcbiAgICBjb25zdCBuZXdDID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgICBuZXdDLndpZHRoID0gY2FudmFzLndpZHRoXG4gICAgbmV3Qy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0XG4gICAgY29uc3QgY3R4ID0gbmV3Qy5nZXRDb250ZXh0KCcyZCcpXG4gICAgaWYoY3R4KXtcbiAgICAgIGN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZVxuICAgICAgY3R4LmNsZWFyUmVjdCgwLDAsIG5ld0Mud2lkdGgsIG5ld0MuaGVpZ2h0KVxuICAgICAgY3R4LmRyYXdJbWFnZShjYW52YXMsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodClcbiAgICB9XG4gIFxuICAgIHJldHVybiBuZXdDO1xufVxuXG5jb25zdCBkZUNvZGVJbWFnZVRhc2s6IHtmaWxlOkZpbGUsIGNiOiAoaW1nOkhUTUxJbWFnZUVsZW1lbnQpID0+IHZvaWR9W10gID0gW11cbmxldCBkZWNvZGluZ051bWJlciA9IDBcblxuXG5jb25zdCBoYW5kbGVEZWNvZGVUYXNrID0gYXN5bmMgKCkgPT4ge1xuICBpZihkZWNvZGluZ051bWJlcjwxKXtcbiAgICBsZXQgdGFzayA9IGRlQ29kZUltYWdlVGFzay5zaGlmdCgpXG4gICAgd2hpbGUodGFzayl7XG4gICAgICBkZWNvZGluZ051bWJlcisrXG4gICAgICBjb25zdCB7IGZpbGUsIGNiIH0gPSB0YXNrXG4gICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKVxuICAgICAgaW1nLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSlcbiAgICAgIHRyeXtcbiAgICAgICAgYXdhaXQgaW1nLmRlY29kZSgpXG4gICAgICB9Y2F0Y2goZSl7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSwgJ2ltZyBkZWNvZGUgZXJyb3InLCBlLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGltZy5zcmMpXG4gICAgICBjYihpbWcpXG4gICAgICBkZWNvZGluZ051bWJlci0tXG4gICAgICB0YXNrID0gZGVDb2RlSW1hZ2VUYXNrLnNoaWZ0KClcbiAgICAgIC8vIGNvbnNvbGUubG9nKGRlY29kaW5nTnVtYmVyLGRlQ29kZUltYWdlVGFzay5sZW5ndGggKVxuICAgIH1cbiAgICBcbiAgfVxufVxuLyoqXG4gKiDnlLHkuo7mtY/op4jlmahpbWfop6PnoIHlhoXlrZjpmZDliLbvvIzmjqfliLbop6PnoIHnmoTlubblj5EuXG4gKiBAcGFyYW0gY2FudmFzRmlsZSBcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUltYWdlQnlGaWxlID0gYXN5bmMgKGNhbnZhc0ZpbGU6IEZpbGUpICA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PihjYiA9PiB7XG4gICAgZGVDb2RlSW1hZ2VUYXNrLnB1c2goIHtmaWxlOmNhbnZhc0ZpbGUsIGNifSApXG4gICAgaGFuZGxlRGVjb2RlVGFzaygpXG4gIH0pXG4gICAgXG59XG5cblxuZXhwb3J0IGNvbnN0IHRvQmxvYiA9IChjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEJsb2IgfCBudWxsPihyZXNvbHZlID0+IHtcbiAgICAgICAgY2FudmFzLnRvQmxvYihyZXNvbHZlLCAnaW1hZ2UvcG5nJywgMSlcbiAgICB9KVxufVxuXG5sZXQgX2VtcHR5VXJsID0gKCk6c3RyaW5nID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBjcmVhdGVDYW52YXMoMCwwKVxuICAgIGNvbnN0IHN0ciA9ICBjYW52YXMudG9EYXRhVVJMKClcbiAgICBfZW1wdHlVcmwgPSAoKSA9PiBzdHJcbiAgICByZXR1cm4gX2VtcHR5VXJsKClcbn1cblxuZXhwb3J0IGNvbnN0IGVtcHR5VXJsID0gKCkgPT4ge1xuICAgcmV0dXJuIF9lbXB0eVVybCgpXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n")},59:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"c\", function() { return /* binding */ workStorage_WorkStorage; });\n__webpack_require__.d(__webpack_exports__, \"b\", function() { return /* reexport */ work_data_WorkDetail; });\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* reexport */ work_data_LayerDetail; });\n\n// UNUSED EXPORTS: WorkDetailDesFile, WorkInfo\n\n// EXTERNAL MODULE: ./node_modules/lodash/isNumber.js\nvar isNumber = __webpack_require__(60);\nvar isNumber_default = /*#__PURE__*/__webpack_require__.n(isNumber);\n\n// EXTERNAL MODULE: ./node_modules/lodash/uniqueId.js\nvar uniqueId = __webpack_require__(48);\nvar uniqueId_default = /*#__PURE__*/__webpack_require__.n(uniqueId);\n\n// EXTERNAL MODULE: ./src/pages/paint/top-tool-bar/tool-item/color-selector/rgba.ts\nvar rgba = __webpack_require__(21);\n\n// EXTERNAL MODULE: ./src/util/canvas.ts\nvar util_canvas = __webpack_require__(47);\n\n// CONCATENATED MODULE: ./src/workStorage/work-data.ts\n\n\n\n/**\n * 作品的描述信息.\n */\n\nclass work_data_WorkInfo {\n  constructor(width, height, name = '', thumbnail, createTime = Date.now(), updateTime = Date.now(), workId = uniqueId_default()(`work_${Date.now()}_`)) {\n    this.width = width;\n    this.height = height;\n    this.name = name;\n    this.thumbnail = thumbnail;\n    this.createTime = createTime;\n    this.updateTime = updateTime;\n    this.workId = workId;\n  }\n\n}\n/**\n * 作品的全部信息.\n */\n\nclass work_data_WorkDetail {\n  constructor(workInfo, layers = []) {\n    this.workInfo = workInfo;\n    this.layers = layers;\n  }\n  /**\n  * \n  * @param width \n  * @param height \n  * @param background \n  */\n\n\n  static createEmpty(width, height, background) {\n    const workInfo = new work_data_WorkInfo(width, height, 'new work', Object(util_canvas[\"d\" /* emptyUrl */])());\n    const layers = [];\n    layers.push(work_data_LayerDetail.create(workInfo, rgba[\"RGBA\"].WHITE));\n    return new work_data_WorkDetail(workInfo, layers);\n  }\n\n} // export enum  LayerDetailType{\n//     TEMP_COVER= 1,\n//     NORMAL = 2,\n// }\n\n/**\n * 作品的图层信息.\n */\n\nclass work_data_LayerDetail {\n  constructor(canvas, name = 'new layer', visible = true, layerId = uniqueId_default()(`layer-${Date.now()}-`)) {\n    this.canvas = canvas;\n    this.name = name;\n    this.visible = visible;\n    this.layerId = layerId;\n  }\n\n  static create({\n    width,\n    height\n  }, color) {\n    const canvas = Object(util_canvas[\"b\" /* createCanvas */])(width, height, color);\n    const layer = new work_data_LayerDetail(canvas);\n    canvas.setAttribute('layerId', layer.layerId);\n    return layer;\n  }\n\n}\n// EXTERNAL MODULE: ./src/workStorage/file-system/index.ts\nvar file_system = __webpack_require__(15);\n\n// CONCATENATED MODULE: ./src/workStorage/index.ts\n\n\n\n\n\nconst getLayerPath = (workId, layerId) => layerId ? `layers/${workId}/${layerId}.png` : `layers/${workId}`;\n\nconst getThumbnailPath = workId => `thumbnail/${workId}.png`; // export class WorkLayerFile {\n//     public workLayersId: string\n//     public workDetailFiles: WorkDetailFile[] = []\n//     constructor({ workLayersId, layers }: WorkLayers) {\n//         this.workLayersId = workLayersId\n//         layers.forEach(({ canvas, layerId, ...rest }) => {\n//             this.workDetailFiles.push({ ...rest, layerId, filePath:  getLayerPath(workLayersId, layerId)})\n//         })\n//     }\n// }\n\n\nclass WorkDetailDesFile {\n  constructor(workDetail) {\n    this.workInfo = void 0;\n    this.layers = void 0;\n    const {\n      workInfo,\n      layers\n    } = workDetail;\n    const {\n      thumbnail,\n      workId,\n      ...restWorkInfo\n    } = workInfo;\n    this.workInfo = {\n      workId,\n      ...restWorkInfo,\n      thumbnail: getThumbnailPath(workId)\n    };\n    this.layers = layers.map(({\n      canvas,\n      layerId,\n      ...rest\n    }) => ({\n      layerId,\n      ...rest,\n      canvas: getLayerPath(workId, layerId)\n    }));\n  }\n\n}\n/**\n * 对作品的持久化存储操作的中间接口.\n * des: workinfo:\n *      content:  \n */\n\nclass workStorage_WorkStorage {\n  /**\n   * 添加作品.\n   * @param workedetail \n   */\n  static async saveWork(workedetail) {\n    if (!workedetail) return;\n    console.time('saveWork');\n    const desFileDate = new WorkDetailDesFile(workedetail);\n    await this.saveWorkInfo(desFileDate);\n    const canvasFileList = this.getCanvasFileList(workedetail, desFileDate);\n\n    for (let i = 0; i < canvasFileList.length; i++) {\n      const {\n        path,\n        canvas\n      } = canvasFileList[i];\n      const data = await Object(util_canvas[\"e\" /* toBlob */])(canvas);\n\n      if (data) {\n        await file_system[\"a\" /* FileApi */].save({\n          type: 'image/png',\n          path,\n          data\n        });\n      }\n    }\n\n    console.timeEnd('saveWork');\n  }\n\n  static async saveWorkInfo(desFileDate) {\n    await file_system[\"a\" /* FileApi */].save({\n      type: 'application/json',\n      path: `${desFileDate.workInfo.workId}.json`,\n      data: JSON.stringify(desFileDate)\n    });\n  }\n\n  static getCanvasFileList(workedetail, desFileDate) {\n    const {\n      layers\n    } = workedetail;\n    const {\n      layers: desLayers\n    } = desFileDate;\n    const thumbnail = {\n      path: desFileDate.workInfo.thumbnail,\n      canvas: this.combimeCanvas(100, 100, layers.map(({\n        canvas\n      }) => canvas))\n    };\n    const canvasFileList = [thumbnail];\n    layers.forEach(({\n      canvas\n    }, index) => {\n      canvasFileList.push({\n        canvas,\n        path: desLayers[index].canvas\n      });\n    });\n    return canvasFileList;\n  }\n\n  static combimeCanvas(width, height, canvasList) {\n    const canvas = Object(util_canvas[\"b\" /* createCanvas */])(width, height);\n    const ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      for (let i = canvasList.length - 1; i > -1; i--) {\n        const canvas = canvasList[i];\n        ctx.drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, width, height);\n      }\n    }\n\n    return canvas;\n  }\n  /**\n   * 删除作品.\n   * @param workId \n   */\n\n\n  static async saveLayerDetail(workId, layer, index) {\n    const {\n      canvas,\n      layerId,\n      ...rest\n    } = layer;\n    const img = await Object(util_canvas[\"e\" /* toBlob */])(canvas);\n    if (!img) return;\n    file_system[\"a\" /* FileApi */].save({\n      type: 'image/png',\n      path: getLayerPath(workId, layerId),\n      data: img\n    });\n    const [file] = await file_system[\"a\" /* FileApi */].get(`${workId}.json`, {\n      isDir: false\n    });\n    const workDetailDesFile = JSON.parse((await file.text()));\n    const layertDetail = workDetailDesFile.layers.find(({\n      layerId: id\n    }) => id === layerId);\n\n    if (!layertDetail && isNumber_default()(index)) {\n      workDetailDesFile.layers.splice(index, 0, {\n        canvas: getLayerPath(workId, layerId),\n        layerId,\n        ...rest\n      });\n      await this.saveWorkInfo(workDetailDesFile);\n    }\n\n    if (layertDetail && isNumber_default()(index)) {\n      throw 'add layer fail: ' + layerId;\n    } // TODO update workInfo\n\n  }\n\n  static async removeWork(layerDetail) {} //TODO  Implement.\n\n  /**\n   * 更新作品的内容, 此时会自动更新 WorkInfo 的 updateTime.\n   */\n\n\n  static async updateLayerDetail(workId, layerdetails) {} //TODO  Implement.\n\n  /**\n   * 根据作品id获取指定作品的所有信息.\n   * \n   * @param workId 作品ID.\n   */\n\n\n  static async getWorkDetail(workId) {\n    console.time('getWorkDetail');\n    const [file] = await file_system[\"a\" /* FileApi */].get(`${workId}.json`, {\n      isDir: false\n    });\n    const text = await file.text();\n    const {\n      workInfo,\n      layers\n    } = JSON.parse(text);\n    const workLayers = [];\n    const canvasFileMap = (await file_system[\"a\" /* FileApi */].get(getLayerPath(workId), {\n      isDir: true\n    })).reduce((map, file) => ({ ...map,\n      [file.name]: file\n    }), {});\n    const infoList = [];\n\n    for (let i = 0; i < layers.length; i++) {\n      const {\n        layerId,\n        visible,\n        name\n      } = layers[i];\n      const canvasFile = canvasFileMap[`${layerId}.png`];\n\n      if (canvasFile) {\n        try {\n          const img = await Object(util_canvas[\"c\" /* createImageByFile */])(canvasFile);\n          const canvas = Object(util_canvas[\"a\" /* copyCanvas */])(img);\n          infoList.push({\n            canvas,\n            name,\n            visible,\n            layerId\n          });\n        } catch (e) {\n          console.error(layerId, 'decode failed');\n        }\n      } else {\n        console.error('no match file' + layerId);\n      }\n    }\n\n    infoList.forEach(({\n      canvas,\n      name,\n      visible,\n      layerId\n    }, index) => {\n      const layerDetail = new work_data_LayerDetail(canvas, name, visible, layerId);\n      workLayers.push(layerDetail);\n    });\n    console.timeEnd('getWorkDetail');\n    return new work_data_WorkDetail(workInfo, workLayers);\n  }\n  /**\n   * 获取作品描述信息列表.\n   */\n\n\n  static async getWorkList() {\n    console.time('getWorkList');\n    let workInfoList;\n    const [textFileList, imgFileList] = await Promise.all([file_system[\"a\" /* FileApi */].get('', {\n      isDir: true\n    }), file_system[\"a\" /* FileApi */].get('thumbnail', {\n      isDir: true\n    })]);\n    const textList = await Promise.all(textFileList.map(textFile => textFile.text()));\n    workInfoList = textList.map(text => {\n      const {\n        workInfo: {\n          thumbnail,\n          workId,\n          ...rest\n        }\n      } = JSON.parse(text);\n      return { ...rest,\n        workId,\n        thumbnail: URL.createObjectURL(imgFileList.find(({\n          name\n        }) => name === `${workId}.png`))\n      };\n    });\n    console.timeEnd('getWorkList');\n    return workInfoList;\n  }\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///59\n")},80:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Vector2; });\n/**\n * The result of Math.atan2 is range from -Math.PI to Math.PI, \n * the function is used to transform the result to range from 0 to 2*Math*PI.\n * \n * @param atan2 The result of Math.atan2.\n * \n * @returns degree range from 0 to 2*Math*PI. \n */\nconst normalizeAtant2 = atan2 => atan2 < 0 ? Math.PI * 2 + atan2 : atan2;\n\nclass Vector2 {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static normalize(v) {\n    const scale = 1 / Vector2.magnitude(v);\n    return new Vector2(v.x * scale, v.y * scale);\n  }\n  /**\n   * get normalized vertical vector2.\n   * @param v \n   */\n\n\n  static vertical({\n    x,\n    y\n  }) {\n    return new Vector2(y, -x);\n  }\n\n  static dist(v1, v2) {\n    return Math.sqrt((v1.x - v2.x) ** 2 + (v1.y - v2.y) ** 2);\n  }\n\n  static magnitude(v) {\n    return Math.sqrt(v.x ** 2 + v.y ** 2);\n  }\n\n  static degree(center, v1, v2) {\n    const deg1 = normalizeAtant2(Math.atan2(v1.y - center.y, v1.x - center.x));\n    const deg2 = normalizeAtant2(Math.atan2(v2.y - center.y, v2.x - center.x));\n    return Math.abs(deg2 - deg1);\n  }\n\n  static add(v1, v2) {\n    return new Vector2(v1.x + v2.x, v1.y + v2.y);\n  }\n  /**\n   * rotate as clockwise.\n   * @param v \n   * @param degree \n   */\n\n\n  static rotate(v, degree) {\n    const magnitude = Vector2.magnitude(v);\n    const deg = normalizeAtant2(Math.atan2(v.y, v.x)) - degree % 360 / 180 * Math.PI;\n    return new Vector2(Math.cos(deg) * magnitude, Math.sin(deg) * magnitude);\n  }\n\n  static multipy({\n    x,\n    y\n  }, scale) {\n    return new Vector2(x * scale, y * scale);\n  }\n\n  static subtract(v1, v2) {\n    return new Vector2(v1.x - v2.x, v1.y - v2.y);\n  }\n\n  static move(v, from, to) {\n    const dx = to.x - from.x;\n    const dy = to.y - from.y;\n    return new Vector2(v.x + dx, v.y + dy);\n  }\n\n  static floor({\n    x,\n    y\n  }) {\n    return new Vector2(Math.floor(x), Math.floor(y));\n  }\n\n}\nVector2.ZERO = new Vector2();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9kYXRhL1ZlY3RvcjIudHM/ZGIwMyJdLCJuYW1lcyI6WyJub3JtYWxpemVBdGFudDIiLCJhdGFuMiIsIk1hdGgiLCJQSSIsIlZlY3RvcjIiLCJjb25zdHJ1Y3RvciIsIngiLCJ5Iiwibm9ybWFsaXplIiwidiIsInNjYWxlIiwibWFnbml0dWRlIiwidmVydGljYWwiLCJkaXN0IiwidjEiLCJ2MiIsInNxcnQiLCJkZWdyZWUiLCJjZW50ZXIiLCJkZWcxIiwiZGVnMiIsImFicyIsImFkZCIsInJvdGF0ZSIsImRlZyIsImNvcyIsInNpbiIsIm11bHRpcHkiLCJzdWJ0cmFjdCIsIm1vdmUiLCJmcm9tIiwidG8iLCJkeCIsImR5IiwiZmxvb3IiLCJaRVJPIl0sIm1hcHBpbmdzIjoiQUFDQTtBQUFBOzs7Ozs7OztBQVFBLE1BQU1BLGVBQWUsR0FBSUMsS0FBRCxJQUFtQkEsS0FBSyxHQUFDLENBQU4sR0FBU0MsSUFBSSxDQUFDQyxFQUFMLEdBQVMsQ0FBVCxHQUFhRixLQUF0QixHQUE4QkEsS0FBekU7O0FBRU8sTUFBTUcsT0FBTixDQUFjO0FBRWpCQyxhQUFXLENBQ1NDLENBQUMsR0FBRyxDQURiLEVBR1NDLENBQUMsR0FBRyxDQUhiLEVBSVY7QUFBQSxTQUhtQkQsQ0FHbkIsR0FIbUJBLENBR25CO0FBQUEsU0FEbUJDLENBQ25CLEdBRG1CQSxDQUNuQjtBQUFFOztBQUlILFNBQU9DLFNBQVAsQ0FBaUJDLENBQWpCLEVBQTJCO0FBQ3ZCLFVBQU1DLEtBQUssR0FBRyxJQUFJTixPQUFPLENBQUNPLFNBQVIsQ0FBa0JGLENBQWxCLENBQWxCO0FBQ0EsV0FBTyxJQUFJTCxPQUFKLENBQVlLLENBQUMsQ0FBQ0gsQ0FBRixHQUFNSSxLQUFsQixFQUF5QkQsQ0FBQyxDQUFDRixDQUFGLEdBQU1HLEtBQS9CLENBQVA7QUFDSDtBQUVEOzs7Ozs7QUFJQSxTQUFPRSxRQUFQLENBQWdCO0FBQUVOLEtBQUY7QUFBS0M7QUFBTCxHQUFoQixF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QUFNQyxFQUFFLEdBQUdELEVBQUUsQ0FBQ3pCLENBQUgsR0FBT3dCLElBQUksQ0FBQ3hCLENBQXZCO0FBQ0EsVUFBTTJCLEVBQUUsR0FBR0YsRUFBRSxDQUFDeEIsQ0FBSCxHQUFPdUIsSUFBSSxDQUFDdkIsQ0FBdkI7QUFDQSxXQUFPLElBQUlILE9BQUosQ0FBYUssQ0FBQyxDQUFDSCxDQUFGLEdBQU0wQixFQUFuQixFQUF1QnZCLENBQUMsQ0FBQ0YsQ0FBRixHQUFNMEIsRUFBN0IsQ0FBUDtBQUNIOztBQUVELFNBQU9DLEtBQVAsQ0FBYTtBQUFDNUIsS0FBRDtBQUFJQztBQUFKLEdBQWIsRUFBNkI7QUFDekIsV0FBTyxJQUFJSCxPQUFKLENBQVlGLElBQUksQ0FBQ2dDLEtBQUwsQ0FBVzVCLENBQVgsQ0FBWixFQUEyQkosSUFBSSxDQUFDZ0MsS0FBTCxDQUFXM0IsQ0FBWCxDQUEzQixDQUFQO0FBQ0g7O0FBbkVnQjtBQUFSSCxPLENBUUYrQixJLEdBQU8sSUFBSS9CLE9BQUosRSIsImZpbGUiOiI4MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBUaGUgcmVzdWx0IG9mIE1hdGguYXRhbjIgaXMgcmFuZ2UgZnJvbSAtTWF0aC5QSSB0byBNYXRoLlBJLCBcbiAqIHRoZSBmdW5jdGlvbiBpcyB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgcmVzdWx0IHRvIHJhbmdlIGZyb20gMCB0byAyKk1hdGgqUEkuXG4gKiBcbiAqIEBwYXJhbSBhdGFuMiBUaGUgcmVzdWx0IG9mIE1hdGguYXRhbjIuXG4gKiBcbiAqIEByZXR1cm5zIGRlZ3JlZSByYW5nZSBmcm9tIDAgdG8gMipNYXRoKlBJLiBcbiAqL1xuY29uc3Qgbm9ybWFsaXplQXRhbnQyID0gKGF0YW4yOiBudW1iZXIpID0+IGF0YW4yPDA/IE1hdGguUEkgKjIgKyBhdGFuMiA6IGF0YW4yXG5cbmV4cG9ydCBjbGFzcyBWZWN0b3IyIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgeCA9IDAsXG5cbiAgICAgICAgcHVibGljIHJlYWRvbmx5IHkgPSAwLFxuICAgICl7fVxuXG4gICAgc3RhdGljIFpFUk8gPSBuZXcgVmVjdG9yMigpXG5cbiAgICBzdGF0aWMgbm9ybWFsaXplKHY6VmVjdG9yMil7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gMSAvIFZlY3RvcjIubWFnbml0dWRlKHYpXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih2LnggKiBzY2FsZSwgdi55ICogc2NhbGUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IG5vcm1hbGl6ZWQgdmVydGljYWwgdmVjdG9yMi5cbiAgICAgKiBAcGFyYW0gdiBcbiAgICAgKi9cbiAgICBzdGF0aWMgdmVydGljYWwoeyB4LCB5fTpWZWN0b3IyKXtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHksIC14KVxuICAgIH1cblxuICAgIHN0YXRpYyBkaXN0KHYxOiBWZWN0b3IyLCB2MjogVmVjdG9yMil7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoKHYxLnggLSB2Mi54KSoqMiArICh2MS55IC0gdjIueSkqKjIgKVxuICAgIH1cblxuICAgIHN0YXRpYyBtYWduaXR1ZGUodjogVmVjdG9yMil7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQodi54KioyICsgdi55KioyIClcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVncmVlKGNlbnRlcjogVmVjdG9yMiwgdjE6VmVjdG9yMiwgdjI6IFZlY3RvcjIpe1xuICAgICAgICBjb25zdCBkZWcxID0gbm9ybWFsaXplQXRhbnQyKE1hdGguYXRhbjIodjEueS1jZW50ZXIueSwgdjEueCAtIGNlbnRlci54KSlcbiAgICAgICAgY29uc3QgZGVnMiA9IG5vcm1hbGl6ZUF0YW50MihNYXRoLmF0YW4yKHYyLnkgLSBjZW50ZXIueSwgdjIueCAtIGNlbnRlci54KSlcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGRlZzIgLSBkZWcxKVxuICAgIH1cblxuICAgIHN0YXRpYyBhZGQodjE6IFZlY3RvcjIsIHYyOiBWZWN0b3IyKXtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHYxLnggKyB2Mi54LCB2MS55ICsgdjIueSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByb3RhdGUgYXMgY2xvY2t3aXNlLlxuICAgICAqIEBwYXJhbSB2IFxuICAgICAqIEBwYXJhbSBkZWdyZWUgXG4gICAgICovXG4gICAgc3RhdGljIHJvdGF0ZSh2OlZlY3RvcjIsIGRlZ3JlZTogbnVtYmVyKXtcbiAgICAgICAgY29uc3QgbWFnbml0dWRlID0gVmVjdG9yMi5tYWduaXR1ZGUodilcbiAgICAgICAgY29uc3QgZGVnICA9IG5vcm1hbGl6ZUF0YW50MihNYXRoLmF0YW4yKHYueSwgdi54KSkgLSAoKGRlZ3JlZSUzNjApLzE4MCAqTWF0aC5QSSlcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKE1hdGguY29zKGRlZykgKiBtYWduaXR1ZGUsIE1hdGguc2luKGRlZykgKiBtYWduaXR1ZGUpXG4gICAgfVxuXG4gICAgc3RhdGljIG11bHRpcHkoe3gsIHl9OiBWZWN0b3IyLCBzY2FsZTogbnVtYmVyKXtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHgqc2NhbGUsIHkqc2NhbGUpXG4gICAgfVxuXG4gICAgc3RhdGljIHN1YnRyYWN0KHYxOiBWZWN0b3IyLCB2MjogVmVjdG9yMil7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih2MS54IC0gdjIueCwgdjEueSAtIHYyLnkpXG4gICAgfVxuICAgIHN0YXRpYyBtb3ZlKHY6IFZlY3RvcjIsIGZyb206IFZlY3RvcjIsIHRvOiBWZWN0b3IyKXtcbiAgICAgICAgY29uc3QgZHggPSB0by54IC0gZnJvbS54XG4gICAgICAgIGNvbnN0IGR5ID0gdG8ueSAtIGZyb20ueVxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoIHYueCArIGR4LCB2LnkgKyBkeSlcbiAgICB9XG5cbiAgICBzdGF0aWMgZmxvb3Ioe3gsIHl9OiBWZWN0b3IyKXtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKE1hdGguZmxvb3IoeCksIE1hdGguZmxvb3IoeSkpXG4gICAgfVxuXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///80\n')}}]);